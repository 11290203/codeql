<!DOCTYPE qhelp PUBLIC
  "-//Semmle//qhelp//EN"
  "qhelp.dtd">
<qhelp>

<overview>
<p>
If a system command invocation is built from user-provided data without sufficient sanitization,
a malicious user may be able to run commands to exfiltrate data or compromise the system.
</p>
</overview>

<recommendation>
<p>
If possible, use hard-coded string literals to specify the command to run, and avoid using 
shell string interpreters such as <code>sh -c</code> to execute shell commands. 
</p>
<p>
If given arguments as a single string, avoid simply splitting the string on 
whitespace. Arguments may contain quoted whitespace, causing them to split into 
multiple arguments.
</p>
<p>
If this is not possible, then add sanitization code to verify that the user input is 
safe before using it, thereby avoiding characters that can change the meaning of the 
command such as spaces and quotes.
</p>
</recommendation>

<example>
<p>
In the following example, assume the function <code>handler</code> is an HTTP request
handler in a web application, whose parameter <code>req</code> contains the request object:
</p>
<sample src="examples/CommandInjection.go"/>
<p>
The handler extracts the name of an image file from the request object, and then runs a command
to process the image. The command is constructed by concatenating the image path and the output path, 
and then running it with <code>sh -c</code>. This can cause a command-injection vulnerability.
</p>
<p>
It's better to avoid shell strings by using the <code>exec.Command</code> function directly, 
as shown in the following example:
</p>
<sample src="examples/CommandInjectionGood.go"/>
<p>
Alternatively, a regular expression can be used to ensure that the image name is safe to use 
in a shell command:
</p>
<sample src="examples/CommandInjectionGood2.go"/>
</example>
<references>
<li>
OWASP: <a href="https://www.owasp.org/index.php/Command_Injection">Command Injection</a>.
</li>
</references>
</qhelp>
