# notice that this is used in the `@codeql_koblin_embeddable` external repo, which means we need to
# reference explicitly @codeql
load(
    "@codeql//java/kotlin-extractor:versions.bzl",
    "VERSIONS",
    "get_compatilibity_sources",
    "version_less",
)
load("@rules_kotlin//kotlin:jvm.bzl", "kt_jvm_library")
load("@rules_kotlin//kotlin:core.bzl", "kt_kotlinc_options")
load("@codeql_kotlin_defaults//:defaults.bzl", "kotlin_extractor_defaults")

_for_embeddable = repo_name().endswith("codeql_kotlin_embeddable")

_common_extractor_name_prefix = "codeql-extractor-kotlin"

_extractor_name_prefix = "%s-%s" % (
    _common_extractor_name_prefix,
    "embeddable" if _for_embeddable else "standalone",
)

py_binary(
    name = "generate_dbscheme",
    srcs = ["generate_dbscheme.py"],
)

genrule(
    name = "generated-dbscheme",
    srcs = ["@codeql//java:dbscheme"],
    outs = ["KotlinExtractorDbScheme.kt"],
    cmd = "$(execpath :generate_dbscheme) $< $@",
    tools = [":generate_dbscheme"],
)

_resources = [
    (
        r,
        r[len("src/main/resources/"):],
    )
    for r in glob(["src/main/resources/**"])
]

[
    (
        kt_kotlinc_options(
            name = "kotlinc-options-%s" % v,
            include_stdlibs = "none",
            jvm_target = "1.8",
            language_version = v[:3],
            warn = "error",
            x_optin = [
                "kotlin.RequiresOptIn",
                "org.jetbrains.kotlin.ir.symbols.%s" %
                ("IrSymbolInternals" if version_less(v, "2.0.0") else "UnsafeDuringIrConstructionAPI"),
            ],
            x_suppress_version_warnings = True,
        ),
        # * extractor.name is different for each version, so we need to put it in different output dirs
        # * in order to put it in `resources`, we need to define `resource_strip_prefix` to strip this version
        # * `resource_strip_prefix` is unique per jar, so we must also put other resources under the same version prefix
        genrule(
            name = "resources-%s" % v,
            srcs = [src for src, _ in _resources],
            outs = [
                "%s/com/github/codeql/extractor.name" % v,
            ] + [
                "%s/%s" % (v, tgt)
                for _, tgt in _resources
            ],
            cmd = "\n".join([
                "echo %s-%s > $(RULEDIR)/%s/com/github/codeql/extractor.name" % (_extractor_name_prefix, v, v),
            ] + [
                "cp $(execpath %s) $(RULEDIR)/%s/%s" % (src, v, tgt)
                for src, tgt in _resources
            ]),
        ),
        kt_jvm_library(
            name = "%s-%s" % (_extractor_name_prefix, v),
            srcs =
                [":generated-dbscheme"] +
                glob(
                    [
                        "src/**/*.kt",
                        "src/**/*.java",
                    ],
                    exclude = ["src/main/kotlin/utils/versions/**"],
                ) + get_compatilibity_sources(v, "src/main/kotlin/utils/versions"),
            kotlinc_opts = ":kotlinc-options-%s" % v,
            module_name = "codeql-kotlin-extractor",
            resource_strip_prefix = "../%s/%s" % (
                repo_name(),
                v,
            ) if _for_embeddable else "%s/%s" % (
                package_name(),
                v,
            ),
            resources = [
                ":resources-%s" % v,
            ],
            visibility = ["//visibility:public"],
            deps = [
                "@kotlin-compiler%s-%s" % (
                    "-embeddable" if _for_embeddable else "",
                    v,
                ),
                "@kotlin-stdlib-%s" % v,
            ],
        ),
        # if in main repository, alias the embeddable versions from the modified @codeql_kotlin_embeddable repo
        alias(
            name = "%s-embeddable-%s" % (_common_extractor_name_prefix, v),
            actual = "@codeql_kotlin_embeddable//:%s-embeddable-%s" % (_common_extractor_name_prefix, v),
            visibility = ["//visibility:public"],
        ) if not _for_embeddable else None,
    )
    for v in VERSIONS
]

# default aliases, based on the kotlinc version installed on the host
# * default version can be overridden with env variableCODEQL_KOTLIN_SINGLE_VERSION
# * setting CODEQL_KOTLIN_SINGLE_VERSION_EMBEDDABLE=true overrides the default variant
# * when a new kotlinc version is installed, you'll need to either `bazel clean` or
#   `bazel fetch --force @codeql_kotlin_defaults//:all` to refresh the default
(
    alias(
        name = "%s-standalone" % _common_extractor_name_prefix,
        actual = "%s-standalone-%s" % (
            _common_extractor_name_prefix,
            kotlin_extractor_defaults.version,
        ),
        visibility = ["//visibility:public"],
    ),
    alias(
        name = "%s-embeddable" % _common_extractor_name_prefix,
        actual = "%s-embeddable-%s" % (
            _common_extractor_name_prefix,
            kotlin_extractor_defaults.version,
        ),
        visibility = ["//visibility:public"],
    ),
    alias(
        name = _common_extractor_name_prefix,
        actual = "%s-%s-%s" % (
            _common_extractor_name_prefix,
            kotlin_extractor_defaults.variant,
            kotlin_extractor_defaults.version,
        ),
        visibility = ["//visibility:public"],
    ),
    alias(
        name = "kotlin-extractor",
        actual = _common_extractor_name_prefix,
        visibility = ["//visibility:public"],
    ),
) if not _for_embeddable else None
